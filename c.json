{
    "t-includes": {
        "prefix": "t-includes",
        "body": [
            "#include <stdlib.h>",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <fcntl.h>",
            "#include <sys/wait.h>",
            "#include <sys/stat.h>",
            "#include <ctype.h>",
            "",
            "$0"
        ]
    },
    "t-main": {
        "prefix": "t-main",
        "body": [
            "int main(int argc, char** argv)",
            "{",
            "\t$1",
            "\t",
            "\texit(0);",
            "}"
        ]
    },
    "t-comment": {
        "prefix": "t-comment",
        "body": [
            "/* $1 */",
            "$0"
        ]
    },
    "t-variables: local variables": {
        "prefix": "t-variables: local variables",
        "body": [
            "/* ------------- Variabili locali ------------- */",
            "",
            "int pid;\t\t\t\t/* process identifier per le fork() */",
            "int ${1:N};\t\t\t\t\t/* numero di file passati sulla riga di comando */",
            "int $2;\t\t\t\t/* indici per i cicli */", 
            "pipe_t ${3:*piped};\t\t\t/* ${4:array dinamico di pipe descriptors} */$5",
            "int status;\t\t\t\t/* variabile di stato per la wait */",
            "int ritorno;\t\t\t/* variabile usata dal padre per recuperare valore di ritorno di ogni figlio */",
            "",
            "/* -------------------------------------------- */",
            "",
            "$0"
        ]
    },
    "t-control: parameters": {
        "prefix": "t-control: parameters",
        "body": [
            "if (argc ${1:<} ${2:n})",
            "{",
            "\tprintf(\"Numero di parametri errato: argc = %d, ma dovrebbe essere >= ${3:n}\\n\", argc);",
            "\texit(1);",
            "}",
            "",
            "/* Numero di parametri passati da linea di comando */",
            "${4:N} = argc - 1;",
            "",
            "$0"
        ]
    },
    "t-pipe: pipe_t": {
        "prefix": "t-pipe: pipe_t",
        "body": [
            "typedef int pipe_t[2];         /* definizione del TIPO pipe_t come array di 2 interi */",
            "",
            "$0"
        ]
    },
    "t-pipe: single": {
        "prefix": "t-pipe: single",
        "body": [
            "/* Creo una pipe per consentire la comunicazione tra ${1:figlio} e ${2:nipote} verificando se l'operazione va a buon fine */",
            "if ((pipe(${3:pipedFiglio})) < 0)",
            "{",
            "\t/* La creazione della pipe ha fallito, stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
            "\tprintf(\"Errore nel piping.\\n\");",
            "\texit(3);",
            "}",
            "",
            "/* Genero un processo ${4:nipote} */",
            "/* Controllo che la fork() abbia successo */",
            "if ((pid = fork()) < 0)",
            "{",
            "\t/* La fork() ha fallito, dunque stampo un messaggio d'errore e ritorno un valore intero d'errore */",
            "\tprintf(\"Errore nella fork.\\n\");",
            "\texit(4);",
            "}",
            "",
            "/* Se pid == 0, allora la fork() ha avuto successo e possiamo eseguire il codice del ${5:nipote} */",
            "if (pid == 0)",
            "{",
            "\t/* Codice del ${6:nipote} */",
            "\tprintf(\"DEBUG-Esecuzione del processo ${7:nipote} %d\\n\", getpid());",
            "\t",
            "\t/* Chiusura del lato di pipe non utilizzato dal ${8:nipote} */",
            "\tclose(${9:pipedFiglio[0]});",
            "\t",
            "\t$0",
            "}",
            "",
            "/* Codice del ${10:figlio} */",
            "",
            "/* Chiusura del lato di pipe non utilizzato dal ${11:figlio} */",
            "close(${12:pipedFiglio[1]});",
            "",
            ""
        ]
    },
    "t-pipe: multiple": {
        "prefix": "t-pipe: multiple",
        "body": [
            "/* Allocazione dell'array di pipe */",
            "piped = (pipe_t*)malloc(${1:N} * sizeof(pipe_t));",
            "/* Controllo che l'allocazione di memoria sia andaata a buon fine */",
            "if (piped == NULL)",
            "{",
            "\t/* In tal caso si e' verificato un errore nell'allocazione: stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
            "\tprintf(\"Errore nell'allocazione della memoria per il vettore di pipe.\\n\");",
            "\texit(2);",
            "}",
            "",
            "/* Creazione delle ${2:N} pipe */",
            "for (i = 0; i < ${3:N}; i++)",
            "{",
            "\t/* Controllo che ogni creazione vada a buon fine */",
            "\tif (pipe(piped[i]) < 0)",
            "\t{",
            "\t\t/* Non e' stato possibile creare la pipe con successo: stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
            "\t\tprintf(\"Errore nel piping.\\n\");",
            "\t\texit(3);",
            "\t}",
            "}",
            "",
            "/* Generazione degli ${4:N} ${5:figli} */",
            "for (i = 0; i < ${6:N}; i++)",
            "{",
            "\t/* Genero un processo ${7:figlio} */",
            "\t/* Controllo che la fork() abbia successo */",
            "\tif ((pid = fork()) < 0)",
            "\t{",
            "\t\t/* La fork() ha fallito, dunque stampo un messaggio d'errore e ritorno un valore intero d'errore */",
            "\t\tprintf(\"Errore nella fork.\\n\");",
            "\t\texit(4);",
            "\t}",
            "\t",
            "\t/* Se pid == 0, allora la fork() ha avuto successo e possiamo eseguire il codice del ${8:figlio} */",
            "\tif (pid == 0)",
            "\t{",
            "\t\t/* Codice del ${9:figlio} */",
            "\t\tprintf(\"DEBUG-Esecuzione del processo ${10:figlio} %d\\n\", getpid());",
            "\t\t",
            "\t\t/* Chiudo i lati di pipe non utilizzati dal ${12:figlio} */",
            "\t\tfor (j = 0; j < ${13:N}; j++)",
            "\t\t{",
            "\t\t\tclose(piped[i][0]);",
            "\t\t\tif (i != j)",
            "\t\t\t{",
            "\t\t\t\tclose(piped[i][1]);",
            "\t\t\t}",
            "\t\t}",
            "\t\t",
            "\t\t$0",
            "\t}",
            "}",
            "",
            "/* Codice del ${11:padre} */",
            "/* Chiudo il lato di pipe non usato dal ${14:padre} */",
            "for (i = 0; i < ${15:N}; i++)",
            "{",
            "\tclose(piped[i][1]);",
            "}",
            "",
            ""
        ]
    },
    "t-fork": {
        "prefix": "t-fork",
        "body": [
            "/* Genero un processo ${1:figlio} */",
            "/* Controllo che la fork() abbia successo */",
            "if ((pid = fork()) < 0)",
            "{",
            "\t/* La fork() ha fallito, dunque stampo un messaggio d'errore e ritorno un valore intero d'errore */",
            "\tprintf(\"Errore nella fork.\\n\");",
            "\texit(4);",
            "}",
            "",
            "/* Se pid == 0, allora la fork() ha avuto successo e possiamo eseguire il codice del ${2:figlio} */",
            "if (pid == 0)",
            "{",
            "\t/* Codice del ${3:figlio} */",
            "\tprintf(\"DEBUG-Esecuzione del processo ${4:figlio} %d\\n\", getpid());",
            "\t",
            "\t/* Chiusura del lato di pipe non utilizzato dal ${6:figlio} */",
            "\tclose(${7:piped[0]});",
            "\t",
            "\t$0",
            "}",
            "",
            "/* Codice del ${5:padre} */",
            "",
            "/* Chiusura del lato di pipe non utilizzato dal ${8:padre} */",
            "close(${9:piped[1]});",
            "",
            ""
        ]
    },
    "t-wait: son-grandson": {
        "prefix": "t-wait: son-grandson",
        "body": [
            "/* Aspetto il nipote */",
            "ritorno = -1;",
            "if ((pidNipote = wait(&status)) < 0)",
            "{",
            "\tprintf(\"Errore del figlio in wait.\\n\");",
            "}",
            "if ((status & 0xFF) != 0)",
            "{",
            "\tprintf(\"Processo nipote %d terminato in modo anomalo.\\n\", pid);",
            "}",
    		"else",
		    "{",
            "\tritorno = (int)((status >> 8) & 0xFF);",
            "\tprintf(\"Il processo nipote %d ha ritornato %d.\\n\", pidNipote, ritorno);",
		    "}",
            "",
            "exit(ritorno);"
        ]
    },
    "t-wait: father-son (single)": {
        "prefix": "t-wait: father-son (single)",
        "body": [
            "/* Aspetto il figlio */",
            "if ((pidFiglio = wait(&status)) < 0)",
            "{",
            "\tprintf(\"Errore del padre in wait.\\n\");",
            "\texit(8);",
            "}",
            "if ((status & 0xFF) != 0)",
            "{",
            "\tprintf(\"Processo nipote %d terminato in modo anomalo.\\n\", pid);",
            "}",
    		"else",
		    "{",
            "\tritorno = (int)((status >> 8) & 0xFF);",
            "\tprintf(\"Il processo nipote %d ha ritornato %d.\\n\", pidFiglio, ritorno);",
		    "}"
        ]
    },
    "t-wait: father-son (multiple)": {
        "prefix": "t-wait: father-son (multiple)",
        "body": [
            "/* Aspetto i figli */",
            "for (i = 0; i < {1:N}; i++)",
            "{",
            "\tif ((pidFiglio = wait(&status)) < 0)",
            "\t{",
            "\t\tprintf(\"Errore del padre in wait.\\n\");",
            "\t\texit(8);",
            "\t}",
            "\tif ((status & 0xFF) != 0)",
            "\t{",
            "\t\tprintf(\"Processo nipote %d terminato in modo anomalo.\\n\", pid);",
            "\t}",
    		"\telse",
		    "\t{",
            "\t\tritorno = (int)((status >> 8) & 0xFF);",
            "\t\tprintf(\"Il processo nipote %d ha ritornato %d.\\n\", pidFiglio, ritorno);",
		    "\t}",
            "}"
        ]
    },
    "t-shell": {
        "prefix": "t-shell",
        "body": [
            "/*",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWXOdllokKXNWWWWWNXXNNXNWMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK00Okkxoc;'....';:ldddddolooloxxOXNWMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxddoc:;;:;;,..''...',;::clllc::clcclx0WM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkoccolc;,,;:;:cc;,,'':llooodxxxdoolooc::lkN",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNklc:::c::::;,::;coocclodxxooooddddooolc;,;:oX",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo;;:::;;;;;;,;:::::clloddol:;;:clcc:;;;;;;cdXW",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWMMMMMMMMMMMWKxc:;::::;;,,;'';;,....';:;,''..'clclc;:::dxx0NMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMWWWNNXXXXXXKKK00OOO0KXXNNNNNXXX0koc::::ccc:;,'',;::;,........;c,.oNWNNX0KKXWWWMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK0OkkOOkO0KXXXXXXXKK0KKKKKXXK00OOkkxkkOOO0Okxddxxxdl:;::;::c:,'',;cloc:;'...',cdo',OMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0OxdooolooddxxxkxxxkkxxdddkOO000KK0Okxkxkkkxxkkkxdddoolc::;;;;:c;'',,,cdxdl:;;''',:cc',ONWMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xollllloodxxxxxddddddddoodddkOOOOOO0KK0kkkkOkxddddooolccccc::;;:;,,,'...;lodolc::;,,;;;,,cox0NWMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNXK0kdollooooddoodxxddddddxddxkkkxkO000kxxxkkOxdxxkkkkkxdollcccccc::;,,'',,'',..,:clolc:;;clc;,,,,:okOXWMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXK0OkxxxdoooddxxxkOkkxxddollooodxkO00OkO00OOkddddxxddodxxkO00Oxoc::::cc:,....',,;;;....';:llc::lol:::;,cxk0NWMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMWNXKKOkdooodddddoodddodddxkkOOOkxdlc:ccodxk00OO0OkkxxdoddddoolloddxO0K0Odccc:cc:,''',,;:;;'...'cdollc:;;::clc:,,,;ok0XNMMMMMMM",
            "MMMMMMMMMMMMMMMMMMWWNXK0Okddooolllodddxxdooollllodxxxkkxxdol:;;cldxOOkkxdddolcllllllllcclodxkkkkkdollc::;;;,''''....,ckNMMWNK0Okxdolc::;;::ccldKWMMMMM",
            "MMMMMMMMMMMWWNXXK00Okxddoooollccllodddddoooolcccloodooollllc::::codxxddlcolccccccccccccclloolllllc::;;;;,,,'.....;lx0NWMMMMMMMMMMMWX0kdl::clldOXMMMMMM",
            "MMMMMMMWXKK0Okxxxxxddoolllccc::cllloodxdollolccccllllllc:::;;;;;;:llooc;;:;;::::::;;:ccccc:::;:::;,,;;,'....';ldOXWMMMMMMMMMMMMMMMMMMMWNK000XNMMMMMMMM",
            "MMMMWX0kddddddddddddddolcc:::::cccclodxddoloolcccccccc::::;;,'',,,;;:c:;:::::c::;;,,,,;:c:,,,,;;;,'',,,;coxk0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMWKkdooollllooooddddollcc::::;::::clodddolloolccccccccccc:;,'''',,;;::ccccccc:;,'''.',;;,;;;,''...',;o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MNOoolllccccccccllllllc::;;;;,,;;;;;;:cloooooddolcccccccccc::;;;;:::::cccc::;;,,'''...',;;;,'.....,;:dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "WOllc::::;;;;::::::::::;;,,,'''',,,,''',::llccllllllllllllccccclllc:;,,,;;;;;;,,'''..':lc,.....'',;ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "Xd:::;;;::ccccccccllcccc:::;;,',,,,,'....,;;;,,;;:cllllclooooooolcc:;,',;:;;;;,,'''''',:c:'...'::,':kNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "Xd:;;cxOKXXXXXXXNNNNNNNNXXXKK000KKK0Okd;....''''''',:::::codxxxolc::::,',,,''''''''''';:llc:;;:dOkc',cok0XXKOkOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "WO:;l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOd:,'............,codollcc:;;;,.........';:oxOKNNKkdc:oOXWN0xdolloolc;l0WMMMM \\$ echo DEBUG-AAAAAARRRRRR MMMMMM",
            "MNk:lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNK00Okxoc,.....cddol::;;;,,,'...',;:ldkKNWMMMMMMMWXxodOWMMMMMWWNNNNkoOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMW0odKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOd:':ddlc:;,,;;,,:dkk0KXXWWMMMMMMMMMMMMMMWX00NMMMMMMMMMMMMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMN0k0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOollc:;,,,,,'':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMWXK00KXWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXko:,;:::;,''''.':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMWNKKKKKKXNWWMMMMMMMMMMMMMMMMMMMMMMMMMWXOo;'...',;,'...'..c0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMWNNXXNNNWMMMMMMMMMMMMMMMMMNKOkxoc;''.....','.......'dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxc,............',,'.......cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo'.............',,'...';cokXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0c.......;loddo:,;,'...:kXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx,......l0NWMMWKoc;,'..lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl......lXMMMMMXd:c:,.'oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc......,kWMMMMMWkc;,''cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc.......cKMMMMMMMWkc;,,c0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,.......lXMMMMMMMMNx:,,:dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd'.... .cKMMMMMMMMMKo:,,cxNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo......,x0XWMMMMMMNd:,';coONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMWWWWWWWWWWWWMMMMMMMXo.......';lONMMMMNd;,'';:cokOKKKKXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMWNNNXXXKKKKKKKKKKKKKOc,'',,,,;;ckKKKKk:','..,;;;::c:;codkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMWWWWWNNNNXXXXKK0OOOOOkkkkkkkkxxc'.''.....'','...',;lkKKKXXXXXXXXXXXXXXNNNNNNNNNNNWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWNXKK0OOkdc;'..':lllcc:;;:ldkOO0000000KKKKXXXXXXXNNNNNNNNNNNNNNWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWNNNXKkkOXNNNNNNNNNWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            "*/"
        ]
    }
}