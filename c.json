{
    "t-includes": {
        "prefix": "t-includes",
        "body": [
            "#include <stdlib.h>",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <fcntl.h>",
            "#include <sys/wait.h>",
            "#include <sys/stat.h>",
            "",
            ""
        ]
    },
    "t-main": {
        "prefix": "t-main",
        "body": [
            "int main(int argc, char** argv)",
            "{",
            "\t$0",
            "\t",
            "\texit(0);",
            "}"
        ]
    },
    "t-comment": {
        "prefix": "t-comment",
        "body": [
            "/* $0 */"
        ]
    },
    "variables: local variables": {
        "prefix": "t-variables: local variables",
        "body": [
            "/* ------------- Variabili locali ------------- */",
            "",
            "int pid;               /* process identifier per le fork() */",
            "int N;                 /* numero di file passati sulla riga di comando */",
            "                       /* indici per i cicli */", 
            "int status;            /* variabile di stato per la wait */",
            "int ritorno;           /* variabile usata dal padre per recuperare valore di ritorno di ogni figlio */",
            "",
            "/* -------------------------------------------- */",
            "",
            ""
        ]
    },
    "t-control: parameters": {
        "prefix": "t-control: parameters",
        "body": [
            "\tif (argc < 3)",
            "\t{",
            "\t\tprintf(\"Numero di parametri errato: argc = %d, ma dovrebbe essere >= 3\\n\", argc)",
            "\t\texit(1)",
            "\t}",
            "\t",
            "\t/*  */",
            "\tN = argc - 1;"
        ]
    },
    "t-pipe: pipe_t": {
        "prefix": "t-pipe: pipe_t",
        "body": [
            "typedef int pipe_t[2];"
        ]
    },
    "t-pipe: normal": {
        "prefix": "t-pipe: normal",
        "body": [
            "\t/* Creo una pipe per consentire la comunicazione padre-figlio verificando se l'operazione va a buon fine */",
            "\tif ((pipe(piped)) < 0)",
            "\t{",
            "\t\t/* La creazione ha fallito, stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
            "\t\tprintf(\"Errore nel piping.\\n\");",
            "\t\texit(3);",
            "\t}"
        ]
    },
    "t-pipe: vector": {
        "prefix": "t-pipe: vector",
        "body": [
            "\t/* Allocazione dell'array di pipe */",
            "\tpiped = (pipe_t*) malloc(N * sizeof(pipe_t));",
            "\t/* Controllo che l'allocazione di memoria sia andaata a buon fine */",
            "\tif (piped == NULL)",
            "\t{",
            "\t\t/* In tal caso si e' verificato un errore nell'allocazione: stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
            "\t\tprintf(\"Errore nell'allocazione della memoria per il vettore di pipe.\\n\");",
            "\t\texit(2);",
            "\t}",
            "\t",
            "\t/* Creazione delle N pipe */",
            "\tfor (i = 0; i < N; i++)",
            "\t{",
            "\t\t/* Controllo che ogni creazione vada a buon fine */",
            "\t\tif (pipe(piped[i]) < 0)",
            "\t\t{",
            "\t\t\t/* Non e' stato possibile creare la pipe con successo: stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
            "\t\t\tprintf(\"Errore nel piping.\\n\");",
            "\t\t\texit(3);",
            "\t\t}",
            "\t}"
        ]
    },
    "t-fork": {
        "prefix": "t-fork",
        "body": [
            "\t/* Genero un processo figlio */",
            "\t/* Controllo che la fork() abbia successo */",
            "\tif ((pid = fork()) < 0)",
            "\t{",
            "\t\t/* La fork() ha fallito, dunque stampo un messaggio d'errore e ritorno un valore intero d'errore */",
            "\t\tprintf(\"Errore nella fork.\\n\");",
            "\t\texit(4);",
            "\t}",
            "\t",
            "\t/* Se pid == 0, allora la fork() ha avuto successo e possiamo eseguire il codice del figlio */",
            "\tif (pid == 0)",
            "\t{",
            "\t\t/* Codice del figlio */",
            "\t\tprintf(\"DEBUG-Esecuzione del processo figlio %d\\n\", getpid());",
            "\t\t",
            "\t\t$0",
            "\t}",
            "\t",
            "\t/* Codice del padre */",
            "\t"
        ]
    },
    "t-wait": {
        "prefix": "t-wait",
        "body": [
            "\t/* Aspetto il figlio */",
            "\tif ((pid = wait(&status)) < 0)",
            "\t{",
            "\t\tprintf(\"Errore nella wait del figlio.\\n\");",
            "\t\texit(8);",
            "\t}",
            "\tif ((status & 0xFF) != 0)",
            "\t{",
            "\t\tprintf(\"Processo figlio %d terminato in modo anomalo.\\n\", pid);",
            "\t}",
    		"\telse",
		    "\t{",
            "\t\tritorno = (int)((status >> 8) & 0xFF);",
		    "\t\tif (ritorno != 0)",
            "\t\t{",
            "\t\t\tprintf(\"Il processo figlio %d e' incorso in un errore ed ha ritornato il valore %d.\\n\", pid, ritorno);",
            "\t\t}",
		    "\t\telse",
            "\t\t{",
            "\t\t\tprintf(\"Il processo figlio %d ha ritornato %d.\\n\", pid, ritorno);",
            "\t\t}",	
		    "\t}"
        ]
    },
    "t-shell": {
        "prefix": "t-shell",
        "body": [
            "/*",
            "                 __",
            "                / _)     \\$ echo DEBUG-AAAAAARRRRRRR",
            "         .-^^^-/ /",
            "      __/       /",
            "     <__.|_|-|_|",
            "*/"
        ]
    }
}